# Generated by Django 4.2.13 on 2024-06-04 18:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import nba.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('action_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('conference_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('country_code', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('division_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.conference')),
            ],
        ),
        migrations.CreateModel(
            name='Matchup',
            fields=[
                ('matchup_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('team_away_score', models.IntegerField()),
                ('team_home_score', models.IntegerField()),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.IntegerField()),
                ('current_quarter', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MatchupType',
            fields=[
                ('matchup_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Pictures',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('img', models.ImageField(upload_to='pictures/')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('number_of_like', models.IntegerField()),
                ('create_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('join_year', models.DateField()),
                ('height', models.DecimalField(decimal_places=2, max_digits=10)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('college', models.CharField(blank=True, max_length=50, null=True)),
                ('img', models.ImageField(blank=True, null=True, upload_to='player_images/')),
                ('is_retirement', models.BooleanField()),
                ('retirement_time', models.DateField(blank=True, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.country')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('position_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('abbr', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('season_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('team_name', models.CharField(max_length=50)),
                ('coach', models.CharField(max_length=50)),
                ('abbr', models.CharField(max_length=3)),
                ('stadium', models.CharField(blank=True, max_length=100, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.division')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerStatistics',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_starting', models.IntegerField()),
                ('min', models.DecimalField(decimal_places=2, max_digits=10)),
                ('point', models.IntegerField()),
                ('assist', models.IntegerField()),
                ('field_goal_made', models.IntegerField()),
                ('field_goal_missed', models.IntegerField()),
                ('three_point_field_goal_made', models.IntegerField()),
                ('three_point_field_goal_missed', models.IntegerField()),
                ('free_throw_made', models.IntegerField()),
                ('free_throw_missed', models.IntegerField()),
                ('rebound', models.IntegerField()),
                ('offr', models.IntegerField()),
                ('dffr', models.IntegerField()),
                ('steal', models.IntegerField()),
                ('block', models.IntegerField()),
                ('turnover', models.IntegerField()),
                ('foul', models.IntegerField()),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.matchup')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.team')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerInTeam',
            fields=[
                ('player_in_team_id', models.AutoField(primary_key=True, serialize=False)),
                ('shirt_number', models.CharField(max_length=10)),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('starter_index', models.IntegerField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.player')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.team')),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.position'),
        ),
        migrations.CreateModel(
            name='MatchupLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quarter', models.IntegerField()),
                ('occur_time', models.CharField(max_length=10)),
                ('remark', models.CharField(blank=True, max_length=300, null=True)),
                ('action_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.actiontype')),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.matchup')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.team')),
            ],
        ),
        migrations.CreateModel(
            name='MatchupDetail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quarter', models.IntegerField()),
                ('team_away_score', models.IntegerField()),
                ('team_home_score', models.IntegerField()),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.matchup')),
            ],
        ),
        migrations.AddField(
            model_name='matchup',
            name='matchup_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.matchuptype'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.season'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='team_away',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_away', to='nba.team'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='team_home',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_home', to='nba.team'),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('jobnumber', models.CharField(max_length=6, unique=True)),
                ('gender', models.CharField(max_length=10, validators=[nba.models.validate_gender])),
                ('date_of_birth', models.DateField()),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Administrator',
                'verbose_name_plural': 'Administrators',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PostSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.team')),
            ],
            options={
                'unique_together': {('team', 'season')},
            },
        ),
    ]
